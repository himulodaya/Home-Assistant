blueprint:
  name: Den Lights Automation
  description: Controls den lights based on time of day, TV status, and door sensor.
  domain: automation
  input:
    den_lights:
      name: Den Lights
      description: Select the den lights to control
      selector:
        entity:
          domain: light
          multiple: true
    chromecast:
      name: Living Room Chromecast/TV
      description: The media player entity for living room TV
      default: media_player.living_room_tv_2
      selector:
        entity:
          domain: media_player
    door_sensor:
      name: Main Door Sensor
      description: The sensor that indicates if the door is open
      default: binary_sensor.main_door
      selector:
        entity:
          domain: binary_sensor
    door_timer_duration:
      name: Door Open Brightness Duration
      description: How long to keep lights at higher brightness after door opens (in minutes)
      default: 5
      selector:
        number:
          min: 1
          max: 30
          unit_of_measurement: minutes
          mode: slider
          step: 1
    dimming_start_time:
      name: Time to Start Dimming
      description: Time to start reducing brightness
      default: "22:30:00"
      selector:
        time: {}
    lights_off_time:
      name: Time to Turn Off Lights
      description: Time to completely turn off lights
      default: "00:00:00"
      selector:
        time: {}

# Triggers
trigger:
  - platform: sun
    event: sunset
    offset: "-00:20:00"
  - platform: sun
    event: sunset
  - platform: sun
    event: sunrise
    offset: "00:15:00"
  - platform: time
    at: !input dimming_start_time
  - platform: time
    at: !input lights_off_time
  - platform: state
    entity_id: !input chromecast
  - platform: state
    entity_id: !input door_sensor

# No global conditions
condition: []

# Actions
action:
  # For door opening
  - choose:
      # Door just opened
      - conditions:
          - condition: template
            value_template: "{{ trigger.entity_id == door_sensor and trigger.to_state.state == 'on' }}"
        sequence:
          # Turn on lights at appropriate brightness
          - service: light.turn_on
            target:
              entity_id: !input den_lights
            data:
              brightness_pct: >
                {% if now().timestamp() < state_attr('sun.sun', 'next_setting').timestamp() and 
                     now().timestamp() > state_attr('sun.sun', 'next_rising').timestamp() %}
                  100
                {% elif is_state(chromecast, 'on') or is_state(chromecast, 'playing') %}
                  60
                {% else %}
                  100
                {% endif %}
                
          # Add timer for reverting if during daytime
          - delay:
              minutes: !input door_timer_duration
                
          # Revert based on time and TV status
          - service: light.turn_{{ 
              'on' if (
                (now().timestamp() > state_attr('sun.sun', 'next_setting').timestamp() and
                 now().timestamp() < state_attr('sun.sun', 'next_rising').timestamp() and
                 now().time() < strptime(lights_off_time, '%H:%M:%S').time() and
                 (is_state(chromecast, 'on') or is_state(chromecast, 'playing')))
              ) else 'off' }}
            target:
              entity_id: !input den_lights
            data:
              brightness_pct: 10
              
      # TV turned on/off
      - conditions:
          - condition: template
            value_template: "{{ trigger.entity_id == chromecast }}"
        sequence:
          # If during daytime, always keep lights off
          - if:
              condition: template
              value_template: "{{ now().timestamp() < state_attr('sun.sun', 'next_setting').timestamp() and 
                                  now().timestamp() > state_attr('sun.sun', 'next_rising').timestamp() }}"
            then:
              - service: light.turn_off
                target:
                  entity_id: !input den_lights
            # If evening/night, set appropriate brightness
            else:
              - service: light.turn_{{ 'on' if (is_state(chromecast, 'on') or is_state(chromecast, 'playing')) else 'off' }}
                target:
                  entity_id: !input den_lights
                data:
                  brightness_pct: 10
                  
      # Sunset
      - conditions:
          - condition: template
            value_template: "{{ trigger.platform == 'sun' and trigger.event == 'sunset' }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input den_lights
            data:
              brightness_pct: 100
              
      # Sunrise
      - conditions:
          - condition: template
            value_template: "{{ trigger.platform == 'sun' and trigger.event == 'sunrise' }}"
        sequence:
          - service: light.turn_off
            target:
              entity_id: !input den_lights
              
      # Dimming start time
      - conditions:
          - condition: template
            value_template: "{{ trigger.platform == 'time' and trigger.at == dimming_start_time }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input den_lights
            data:
              brightness_pct: "{{ 10 if (is_state(chromecast, 'on') or is_state(chromecast, 'playing')) else 50 }}"
              
      # Lights off time
      - conditions:
          - condition: template
            value_template: "{{ trigger.platform == 'time' and trigger.at == lights_off_time }}"
        sequence:
          - service: light.turn_{{ 'on' if (is_state(chromecast, 'on') or is_state(chromecast, 'playing')) else 'off' }}
            target:
              entity_id: !input den_lights
            data:
              brightness_pct: 10
              
    default:
      - delay:
          milliseconds: 1
