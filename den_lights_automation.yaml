blueprint:
  name: Den Lights Automation
  description: Controls den lights based on time, media player status, and door sensor.
  domain: automation
  input:
    den_lights:
      name: Den Lights
      description: Select the den lights to control
      selector:
        entity:
          domain: light
          multiple: true
    chromecast:
      name: Living Room Chromecast/TV
      description: The media player entity for living room TV
      default: media_player.living_room_tv_2
      selector:
        entity:
          domain: media_player
    door_sensor:
      name: Main Door Sensor
      description: The sensor that indicates if the door is open
      default: binary_sensor.main_door
      selector:
        entity:
          domain: binary_sensor
    door_timer_duration:
      name: Door Open Brightness Duration
      description: How long to keep lights at 60% after door opens (in minutes)
      default: 5
      selector:
        number:
          min: 1
          max: 30
          unit_of_measurement: minutes
          mode: slider
          step: 1
    dimming_start_time:
      name: Time to Start Dimming
      description: Time to start reducing brightness
      default: "22:30:00"
      selector:
        time: {}
    lights_off_time:
      name: Time to Turn Off Lights
      description: Time to completely turn off lights
      default: "00:00:00"
      selector:
        time: {}

variables:
  den_lights: !input den_lights
  chromecast: !input chromecast
  door_sensor: !input door_sensor
  door_timer_duration: !input door_timer_duration
  dimming_start_time: !input dimming_start_time
  lights_off_time: !input lights_off_time

# Multiple triggers
trigger:
  # Pre-sunset trigger (20 minutes before sunset)
  - platform: sun
    event: sunset
    offset: "-00:20:00"
  # Sunset trigger
  - platform: sun
    event: sunset
  # Sunrise trigger
  - platform: sun
    event: sunrise
    offset: "00:15:00"
  # Time-based triggers
  - platform: time
    at: !input dimming_start_time
  - platform: time
    at: !input lights_off_time
  # Media player state change
  - platform: state
    entity_id: !input chromecast
  # Door sensor state change  
  - platform: state
    entity_id: !input door_sensor

condition: []

action:
  - variables:
      is_after_sunset: "{{ now() > (state_attr('sun.sun', 'next_rising') - timedelta(hours=12)) }}"
      is_before_sunrise: "{{ now() < state_attr('sun.sun', 'next_rising') }}"
      is_night_time: "{{ is_after_sunset and is_before_sunrise }}"
      is_daytime: "{{ not is_night_time and not is_pre_sunset_time }}"
      is_pre_sunset_time: >
        {% set sunset_time = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
        {% set current_time = as_timestamp(now()) %}
        {% set time_diff = sunset_time - current_time %}
        {{ time_diff >= 0 and time_diff <= 1200 }}
      is_tv_on: "{{ states(chromecast) == 'playing' or states(chromecast) == 'on' }}" 
      is_after_dimming_time: >
        {% set dimming_time = strptime(dimming_start_time, '%H:%M:%S').time() %}
        {% set current_time = now().time() %}
        {{ current_time >= dimming_time }}
      is_after_lights_off_time: >
        {% set off_time = strptime(lights_off_time, '%H:%M:%S').time() %}
        {% set current_time = now().time() %}
        {{ current_time >= off_time }}
      is_door_open: "{{ is_state(door_sensor, 'on') }}"
      is_evening_time: "{{ (is_night_time or trigger.platform == 'sun' and trigger.event == 'sunset') and not is_after_dimming_time and not is_after_lights_off_time }}"

  # Pre-sunset gradual turn on (20 minutes before sunset)
  - if:
      condition: "{{ is_pre_sunset_time and trigger.platform == 'sun' and trigger.event == 'sunset' }}"
    then:
      - variables:
          time_to_sunset: >
            {% set sunset_time = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
            {% set current_time = as_timestamp(now()) %}
            {{ sunset_time - current_time }}
          sunset_progress: "{{ 1 - (time_to_sunset / 1200) }}"
          sunset_brightness: "{{ max(10, (sunset_progress * 100)) | round(0) }}"
      - service: light.turn_on
        target:
          entity_id: !input den_lights
        data:
          brightness_pct: "{{ sunset_brightness }}"

  # Door has just opened
  - if:
      condition: "{{ trigger.entity_id == door_sensor and trigger.to_state.state == 'on' }}"
    then:
      - variables:
          brightness_level: >
            {% if is_daytime or is_after_lights_off_time %}
              100
            {% elif is_tv_on %}
              60
            {% else %}
              100
            {% endif %}
      - service: light.turn_on
        target:
          entity_id: !input den_lights
        data:
          brightness_pct: "{{ brightness_level }}"
      # Handle daytime or after midnight
      - if:
          condition: "{{ is_daytime or is_after_lights_off_time }}"
        then:
          - delay:
              minutes: !input door_timer_duration
          # For daytime, always turn off after timer
          - if:
              condition: "{{ is_daytime }}"
            then:
              - service: light.turn_off
                target:
                  entity_id: !input den_lights
          # For after midnight with TV on
          - if:
              condition: "{{ is_after_lights_off_time and is_tv_on }}"
            then:
              - service: light.turn_on
                target:
                  entity_id: !input den_lights
                data:
                  brightness_pct: 10
            else:
              - if:
                  condition: "{{ is_after_lights_off_time }}"
                then:
                  - service: light.turn_off
                    target:
                      entity_id: !input den_lights
      # For evening with TV on
      - if:
          condition: "{{ not is_daytime and not is_after_lights_off_time and is_tv_on }}"
        then:
          - delay:
              minutes: !input door_timer_duration
          - service: light.turn_on
            target:
              entity_id: !input den_lights
            data:
              brightness_pct: 10

  # Daytime TV state changes
  - if:
      condition: "{{ is_daytime and trigger.entity_id == chromecast }}"
    then:
      - service: light.turn_off
        target:
          entity_id: !input den_lights

  # Evening/Night TV handling without door open
  - if:
      condition: "{{ not is_daytime and trigger.entity_id == chromecast and is_tv_on and not is_door_open }}"
    then:
      - service: light.turn_on
        target:
          entity_id: !input den_lights
        data:
          brightness_pct: 10

  # TV with door open (evening only)
  - if:
      condition: "{{ not is_daytime and trigger.entity_id == chromecast and is_tv_on and is_door_open }}"
    then:
      - service: light.turn_on
        target:
          entity_id: !input den_lights
        data:
          brightness_pct: 60
      - delay:
          minutes: !input door_timer_duration
      - service: light.turn_on
        target:
          entity_id: !input den_lights
        data:
          brightness_pct: 10

  # After midnight
  - if:
      condition: "{{ is_after_lights_off_time and not is_tv_on and trigger.entity_id != door_sensor }}"
    then:
      - service: light.turn_off
        target:
          entity_id: !input den_lights

  # Dimming period (10:30PM-12AM)
  - if:
      condition: "{{ is_after_dimming_time and not is_after_lights_off_time and not is_tv_on and trigger.entity_id != door_sensor }}"
    then:
      - variables:
          total_dimming_period: >
            {% set dim_time = strptime(dimming_start_time, '%H:%M:%S') %}
            {% set off_time = strptime(lights_off_time, '%H:%M:%S') %}
            {% if off_time < dim_time %}
              {% set off_time = off_time + timedelta(days=1) %}
            {% endif %}
            {{ (off_time - dim_time).total_seconds() }}
          time_since_dimming_start: >
            {% set dim_time = strptime(dimming_start_time, '%H:%M:%S') %}
            {% set current = now() %}
            {% set current_time = current.replace(hour=current.hour, minute=current.minute, second=current.second) %}
            {% if current_time < dim_time %}
              {% set current_time = current_time + timedelta(days=1) %}
            {% endif %}
            {{ (current_time - dim_time).total_seconds() }}
          dimming_progress: "{{ time_since_dimming_start / total_dimming_period }}"
          dimming_brightness: "{{ max(10, 100 - (dimming_progress * 90)) | round(0) }}"
      - service: light.turn_on
        target:
          entity_id: !input den_lights
        data:
          brightness_pct: "{{ dimming_brightness }}"

  # Daytime - keep lights off
  - if:
      condition: "{{ is_daytime and trigger.entity_id != door_sensor }}"
    then:
      - service: light.turn_off
        target:
          entity_id: !input den_lights

  # Standard evening time
  - if:
      condition: "{{ is_evening_time }}"
    then:
      - service: light.turn_on
        target:
          entity_id: !input den_lights
        data:
          brightness_pct: 100
