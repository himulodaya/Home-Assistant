blueprint:
  name: Den Lights Automation
  description: Controls den lights based on time of day, TV status, and door sensor.
  domain: automation
  input:
    den_lights:
      name: Den Lights
      description: Select the den lights to control
      selector:
        entity:
          domain: light
          multiple: true
    chromecast:
      name: Living Room Chromecast/TV
      description: The media player entity for living room TV
      default: media_player.living_room_tv_2
      selector:
        entity:
          domain: media_player
    door_sensor:
      name: Main Door Sensor
      description: The sensor that indicates if the door is open
      default: binary_sensor.main_door
      selector:
        entity:
          domain: binary_sensor
    door_timer_duration:
      name: Door Open Brightness Duration
      description: How long to keep lights at higher brightness after door opens (in minutes)
      default: 5
      selector:
        number:
          min: 1
          max: 30
          unit_of_measurement: minutes
          mode: slider
          step: 1
    dimming_start_time:
      name: Time to Start Dimming
      description: Time to start reducing brightness
      default: "22:30:00"
      selector:
        time: {}
    lights_off_time:
      name: Time to Turn Off Lights
      description: Time to completely turn off lights
      default: "00:00:00"
      selector:
        time: {}

# Multiple triggers
trigger:
  # Pre-sunset trigger (20 minutes before sunset)
  - platform: sun
    event: sunset
    offset: "-00:20:00"
  # Sunset trigger
  - platform: sun
    event: sunset
  # Sunrise trigger
  - platform: sun
    event: sunrise
    offset: "00:15:00"
  # Time-based triggers
  - platform: time
    at: !input dimming_start_time
  - platform: time
    at: !input lights_off_time
  # Media player state change
  - platform: state
    entity_id: !input chromecast
  # Door sensor state change  
  - platform: state
    entity_id: !input door_sensor

condition: []

action:
  # Calculate all variables first
  - variables:
      is_after_sunset: "{{ now() > (state_attr('sun.sun', 'next_rising') - timedelta(hours=12)) }}"
      is_before_sunrise: "{{ now() < state_attr('sun.sun', 'next_rising') }}"
      is_night_time: "{{ is_after_sunset and is_before_sunrise }}"
      sunset_time: "{{ state_attr('sun.sun', 'next_setting') }}"
      current_ts: "{{ now().timestamp() }}"
      sunset_ts: "{{ as_timestamp(sunset_time) }}"
      time_to_sunset: "{{ sunset_ts - current_ts }}"
      is_pre_sunset_time: "{{ time_to_sunset >= 0 and time_to_sunset <= 1200 }}"
      is_daytime: "{{ not is_night_time and not is_pre_sunset_time }}"
      is_tv_on: "{{ states(chromecast) == 'playing' or states(chromecast) == 'on' }}" 
      dimming_time: "{{ strptime(dimming_start_time, '%H:%M:%S').time() }}"
      current_time: "{{ now().time() }}"
      is_after_dimming_time: "{{ current_time >= dimming_time }}"
      off_time: "{{ strptime(lights_off_time, '%H:%M:%S').time() }}"
      is_after_lights_off_time: "{{ current_time >= off_time }}"
      is_door_open: "{{ is_state(door_sensor, 'on') }}"
      is_evening_time: "{{ is_night_time and not is_after_dimming_time and not is_after_lights_off_time }}"
      is_door_opened_trigger: "{{ trigger.entity_id == door_sensor and trigger.to_state.state == 'on' }}"
      is_pre_sunset_trigger: "{{ trigger.platform == 'sun' and trigger.event == 'sunset' and is_pre_sunset_time }}"
      is_tv_state_change: "{{ trigger.entity_id == chromecast }}"
  
  # Selective actions based on simplified conditions
  - choose:
      # Pre-sunset gradual turn on
      - conditions:
          - condition: template
            value_template: "{{ is_pre_sunset_trigger }}"
        sequence:
          - variables:
              sunset_progress: "{{ 1 - (time_to_sunset / 1200) }}"
              sunset_brightness: "{{ max(10, (sunset_progress * 100)) | round(0) }}"
          - service: light.turn_on
            target:
              entity_id: !input den_lights
            data:
              brightness_pct: "{{ sunset_brightness }}"
      
      # Door has just opened
      - conditions:
          - condition: template
            value_template: "{{ is_door_opened_trigger }}"
        sequence:
          - variables:
              brightness_level: >
                {% if is_daytime or is_after_lights_off_time %}
                  100
                {% elif is_tv_on %}
                  60
                {% else %}
                  100
                {% endif %}
          - service: light.turn_on
            target:
              entity_id: !input den_lights
            data:
              brightness_pct: "{{ brightness_level }}"
          
          # For daytime or after midnight
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ is_daytime or is_after_lights_off_time }}"
                sequence:
                  - delay:
                      minutes: !input door_timer_duration
                  # Check conditions again after delay
                  - choose:
                      # Daytime - turn off after timer
                      - conditions:
                          - condition: template
                            value_template: "{{ is_daytime }}"
                        sequence:
                          - service: light.turn_off
                            target:
                              entity_id: !input den_lights
                      # After midnight with TV on
                      - conditions:
                          - condition: template
                            value_template: "{{ is_after_lights_off_time and is_tv_on }}"
                        sequence:
                          - service: light.turn_on
                            target:
                              entity_id: !input den_lights
                            data:
                              brightness_pct: 10
                    default:
                      # After midnight, no TV
                      - service: light.turn_off
                        target:
                          entity_id: !input den_lights
              
              # Evening with TV on
              - conditions:
                  - condition: template
                    value_template: "{{ not is_daytime and not is_after_lights_off_time and is_tv_on }}"
                sequence:
                  - delay:
                      minutes: !input door_timer_duration
                  - service: light.turn_on
                    target:
                      entity_id: !input den_lights
                    data:
                      brightness_pct: 10
      
      # TV state change during daytime
      - conditions:
          - condition: template
            value_template: "{{ is_daytime and is_tv_state_change }}"
        sequence:
          - service: light.turn_off
            target:
              entity_id: !input den_lights
      
      # TV on during evening/night without door open
      - conditions:
          - condition: template
            value_template: "{{ not is_daytime and is_tv_state_change and is_tv_on and not is_door_open }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input den_lights
            data:
              brightness_pct: 10
      
      # TV on with door open during evening
      - conditions:
          - condition: template
            value_template: "{{ not is_daytime and is_tv_state_change and is_tv_on and is_door_open }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input den_lights
            data:
              brightness_pct: 60
          - delay:
              minutes: !input door_timer_duration
          - service: light.turn_on
            target:
              entity_id: !input den_lights
            data:
              brightness_pct: 10
      
      # After midnight
      - conditions:
          - condition: template
            value_template: "{{ is_after_lights_off_time and not is_tv_on and trigger.entity_id != door_sensor }}"
        sequence:
          - service: light.turn_off
            target:
              entity_id: !input den_lights
      
      # Dimming period (10:30PM-12AM)
      - conditions:
          - condition: template
            value_template: "{{ is_after_dimming_time and not is_after_lights_off_time and not is_tv_on and trigger.entity_id != door_sensor }}"
        sequence:
          - variables:
              dim_time: "{{ strptime(dimming_start_time, '%H:%M:%S') }}"
              off_time: "{{ strptime(lights_off_time, '%H:%M:%S') }}"
              adjusted_off_time: "{{ off_time if off_time >= dim_time else off_time + timedelta(days=1) }}"
              total_dimming_period: "{{ (adjusted_off_time - dim_time).total_seconds() }}"
              
              current: "{{ now() }}"
              current_dt: "{{ current.replace(hour=current.hour, minute=current.minute, second=current.second) }}"
              adjusted_current_dt: "{{ current_dt if current_dt >= dim_time else current_dt + timedelta(days=1) }}"
              time_since_dimming_start: "{{ (adjusted_current_dt - dim_time).total_seconds() }}"
              
              dimming_progress: "{{ time_since_dimming_start / total_dimming_period }}"
              dimming_brightness: "{{ max(10, 100 - (dimming_progress * 90)) | round(0) }}"
          - service: light.turn_on
            target:
              entity_id: !input den_lights
            data:
              brightness_pct: "{{ dimming_brightness }}"
      
      # Daytime - keep lights off
      - conditions:
          - condition: template
            value_template: "{{ is_daytime and trigger.entity_id != door_sensor }}"
        sequence:
          - service: light.turn_off
            target:
              entity_id: !input den_lights
      
      # Standard evening time
      - conditions:
          - condition: template
            value_template: "{{ is_evening_time or (trigger.platform == 'sun' and trigger.event == 'sunset' and not is_pre_sunset_time) }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input den_lights
            data:
              brightness_pct: 100
    
    # Default - do nothing if no condition matches
    default: []

mode: single
